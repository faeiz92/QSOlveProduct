// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240609142739_qsolve")]
    partial class qsolve
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Entities.Models.OrderItem", b =>
                {
                    b.Property<Guid>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ORDER_ITEM_ID");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int")
                        .HasColumnName("ORDER_QUANTITY");

                    b.Property<Guid>("OrdersOrderId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal")
                        .HasColumnName("PRICE");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrdersOrderId");

                    b.ToTable("ORDER_ITEM");
                });

            modelBuilder.Entity("Entities.Models.Orders", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("ORDER_ID");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CUSTOMER_ID");

                    b.Property<DateTime>("OrderDateTime")
                        .HasColumnType("date")
                        .HasColumnName("ORDER_DATETIME");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal")
                        .HasColumnName("TOTAL_PRICE");

                    b.HasKey("OrderId");

                    b.ToTable("ORDERS");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("string")
                        .HasColumnName("DESCRIPTION");

                    b.Property<Guid?>("OrderItemId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("string")
                        .HasColumnName("PRODUCT_NAME");

                    b.HasKey("ProductId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("PRODUCT");
                });

            modelBuilder.Entity("Entities.Models.ProductCategory", b =>
                {
                    b.Property<Guid>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("PRODUCT_CATEGORY_ID");

                    b.Property<string>("ProductCategoryName")
                        .IsRequired()
                        .HasColumnType("string")
                        .HasColumnName("PRODUCT_CATEGORY_NAME");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("PRODUCT_CATEGORY");
                });

            modelBuilder.Entity("Entities.Models.OrderItem", b =>
                {
                    b.HasOne("Entities.Models.Orders", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("OrdersOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.OrderItem", null)
                        .WithMany("Products")
                        .HasForeignKey("OrderItemId");

                    b.HasOne("Entities.Models.ProductCategory", "ProductCategories")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Entities.Models.OrderItem", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Models.Orders", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Entities.Models.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
